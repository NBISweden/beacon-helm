apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "beacon.fullname" . }}-config
data:
  config.ini: |-
    # This file is used to configure the Beacon `/info` API endpoint
    # This file's default location is /beacon-python/beacon_api/conf/config.ini
    
    [beacon_general_info]
    # Name of the Beacon service
    title={{ .Values.config.ini.title }}
    # Version of the Beacon implementation
    version={{ .Chart.AppVersion }}
    # Author of this software
    author=CSC developers
    # Software license for this distribution
    license=Apache 2.0
    # Copyright holder for this software
    copyright=CSC - IT Center for Science
    # Documentation url for GA4GH Discovery
    docs_url=https://beacon-python.readthedocs.io/en/latest/
    
    
    [beacon_api_info]
    # Version of the Beacon API specification this implementation adheres to
    apiVersion=1.1.0
    # Globally unique identifier for this Beacon instance
    beaconId={{ .Values.config.ini.beaconID }}
    # Description of this Beacon service
    description={{ .Values.config.ini.description }}
    # Homepage for Beacon service
    url={{ .Values.config.ini.url }}
    # Alternative URL for Beacon service for e.g. internal use cases
    alturl=
    # Datetime when this Beacon was created
    createtime={{ ternary (now  | date "2006-01-02 15:04:05") .Values.config.ini.createtime (empty .Values.config.ini.createtime)}}
    # GA4GH Discovery type `groupId` and `artifactId`, joined in /service-info with apiVersion
    # See https://github.com/ga4gh-discovery/ga4gh-service-info for more information and possible values
    service_group=org.ga4gh
    service_artifact=beacon
    # GA4GH Discovery server environment, possible values: prod, dev, test
    environment={{ .Values.config.ini.environment }}


    [organisation_info]
    # Globally unique identifier for organisation that hosts this Beacon service
    org_id={{ .Values.config.ini.environment }}
    # Name of organisation that hosts this Beacon service
    org_name={{ .Values.config.ini.org_name }}
    # Description for organisation
    org_description={{ .Values.config.ini.org_description }}
    # Visit address of organisation
    org_address={{ .Values.config.ini.org_address }}
    # Homepage of organisation
    org_welcomeUrl={{ .Values.config.ini.org_welcomeUrl }}
    # URL for contacting organisation
    org_contactUrl={{ .Values.config.ini.org_contactUrl }}
    # URL for organisation logo
    org_logoUrl={{ .Values.config.ini.org_logoUrl }}
    # Other organisational information
    org_info={{ .Values.config.ini.org_info }}
    
    [handover_info]
    # The base url for all handovers
    # if this url is empty or commented, handover feature is disabled
    drs=
    # Make the handovers 1- or 0-based
    handover_base = 1
    # Handovers for datasets
    dataset_paths=
      Variants,browse the variants matched by the query,dataset/{dataset}/browser/variant/{chr}-{start}-{ref}-{alt}
      Region,browse data of the region matched by the query,dataset/{dataset}/browser/region/{chr}-{start}-{end}
      Data,retrieve information of the datasets,dataset/{dataset}/browser
    # Handovers for general beacon
    beacon_paths=
      Project,retrieve information about the datasets,dataset/{dataset}

    [oauth2]
    # OAuth2 server that returns public key for JWT Bearer token validation
    server=https://login.elixir-czech.org/oidc/jwk
    # Authenticated Bearer token issuers, separated by commas if multiple
    issuers=https://login.elixir-czech.org/oidc/
    # Where to send access token to view user data (permissions, statuses, ...)
    userinfo=https://login.elixir-czech.org/oidc/userinfo
    # What the value of `AcceptedTermsAndPolicies` and `ResearcherStatus` must be in order
    # to be recognised as a Bona Fide researcher
    bona_fide_value=https://doi.org/10.1038/s41431-018-0219-y
    # String or URI to state the intended recipient of the token.
    # If your application is part of a larger network,
    # the network administrator should supply you with their `aud` identifier
    # in other cases, leave this empty or use the personal identifier given to you from your AAI
    # For multiple values, separate values with commas, e.g. aud1,aud2,aud3
    audience=
    # Verify `aud` claim of token.
    # If you want to validate the intended audience of a token, set this value to True.
    # This option requires you to also set a value for the `audience` key above.
    # If your service is not part of any network or AAI, but you still want to use tokens
    # produced by other AAI parties, set this value to False to skip the audience validation step
    verify_aud=False

{{- range  $val := toStrings .Values.config.publicKey.data }}
  public.key: |-
{{ $val | indent 4}}
{{- end }}

---
{{- if and .Values.postgresql.enabled .Values.postgresql.initdbScriptsConfigMap }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.postgresql.initdbScriptsConfigMap }}
data:
  init.sql: |-
    CREATE TYPE access_levels AS enum('CONTROLLED', 'REGISTERED', 'PUBLIC');

    CREATE TABLE IF NOT EXISTS beacon_dataset_table (
        index SERIAL,
        name VARCHAR(128),
        datasetId VARCHAR(128),
        description VARCHAR(512),
        assemblyId VARCHAR(16),
        createDateTime TIMESTAMP WITH TIME ZONE,
        updateDateTime TIMESTAMP WITH TIME ZONE,
        version VARCHAR(8),
        sampleCount INTEGER,
        externalUrl VARCHAR(256),
        accessType access_levels,
        PRIMARY KEY (index)
    );

    /*
    The values in this table take a long time to compute on large datasets
    Most likely these values do not change once the dataset is loaded so one
    could compute the values and UPDATE the table once the all dataset is inserted

    callcount: SELECT count(*) FROM (SELECT distinct(datasetId, chromosome, reference, start)
                                    FROM beacon_data_table) t;

    variantcount: SELECT count(*) FROM beacon_data_table;
    */

    CREATE TABLE IF NOT EXISTS beacon_dataset_counts_table (
        datasetId VARCHAR(128),
        callCount INTEGER DEFAULT NULL,
        variantCount BIGINT DEFAULT NULL
    );

    CREATE TABLE IF NOT EXISTS beacon_data_table (
        index SERIAL,
        datasetId VARCHAR(128),
        start INTEGER,
        chromosome VARCHAR(2),
        reference VARCHAR(8192),
        alternate VARCHAR(8192),
        "end" INTEGER,
        aggregatedVariantType VARCHAR(16),
        alleleCount INTEGER,
        callCount INTEGER,
        frequency REAL,
        variantType VARCHAR(16),
        PRIMARY KEY (index)
    );

    CREATE TABLE IF NOT EXISTS beacon_mate_table (
        index SERIAL,
        datasetId VARCHAR(128),
        chromosome VARCHAR(2), 
        chromosomeStart INTEGER,
        chromosomePos VARCHAR(128), /*for working with MATEID*/
        mate VARCHAR(2), 
        mateStart INTEGER,
        matePos VARCHAR(128), /*for working with MATEID*/
        reference VARCHAR(8192),
        alternate VARCHAR(8192),
        alleleCount INTEGER,
        callCount INTEGER,
        frequency REAL,
        "end" INTEGER,
        PRIMARY KEY (index)
    );

    CREATE UNIQUE INDEX data_conflict ON beacon_data_table (datasetId, chromosome, start, reference, alternate);
    CREATE UNIQUE INDEX metadata_conflict ON beacon_dataset_table (name, datasetId);
    CREATE UNIQUE INDEX mate_conflict ON beacon_mate_table (datasetId, chromosome, mate, chromosomePos, matePos);


    CREATE OR REPLACE VIEW dataset_metadata(name, datasetId, description, assemblyId,createDateTime, updateDateTime,
                                            version,callCount, variantCount, sampleCount, externalUrl, accessType)
    AS SELECT a.name, a.datasetId, a.description, a.assemblyId, a.createDateTime,a.updateDateTime, a.version, 
            b.callCount,b.variantCount,a.sampleCount, a.externalUrl, a.accessType
    FROM beacon_dataset_table a, beacon_dataset_counts_table b
    WHERE a.datasetId=b.datasetId
    GROUP BY a.name, a.datasetId, a.description, a.assemblyId, a.createDateTime,a.updateDateTime, a.version,
            a.sampleCount, a.externalUrl, a.accessType, b.callCount, b.variantCount;

{{- end }}
